extends TextureRect
class_name ItemSlot
enum { INVENTORY, HOTBAR, SHOP, CRAFT }

export (String) var index
var item
var type
var label

func _test(index, type):
	self.index = index
	self.type = type

func _init(index, type):
	self.index = index
	self.type = type
	name = 'ItemSlot_%d' % index
	texture = preload('res://assets/gui/inventory-slot.png')
	
	mouse_filter = Control.MOUSE_FILTER_PASS
	mouse_default_cursor_shape = Control.CURSOR_POINTING_HAND
	
	label = Label.new()
	label.text = ''
	label.rect_position = Vector2(2, 15)
	label.rect_scale = Vector2(.5, .5)
	label.set("custom_fonts/font", 'res://prefabs/TESTS/inventory-gui/font.tres')
	add_child(label)
#	label.set("custom_colors/font_color", Color(0, 0, 0, 1))

func _set_item(new_item):
	add_child(new_item)
	
	item = new_item
	
	item.rect_size = rect_size
	item.stretch_mode = 4
	
	_update_amount()
	

func _pick_item():
	item.mouse_filter = Control.MOUSE_FILTER_IGNORE
	
	remove_child(item)
	Utils.get_scene_root().add_child(item)
	
	item = null
	
	_update_amount()
	
func _store_item(new_item):
	item = new_item
	item.rect_global_position = Vector2(0, 0)
	item.mouse_filter = Control.MOUSE_FILTER_PASS
	
	Utils.get_scene_root().remove_child(item)
	add_child(item)
	
	_update_amount()
#	label.text = str(item.data.attributes.amount)

func _update_amount():
	remove_child(label)
	add_child(label)
	if item: label.text = str(item.data.attributes.amount)
	else: label.text = ''